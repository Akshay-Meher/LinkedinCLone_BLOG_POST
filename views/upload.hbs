<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chunked File Upload</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>

<body>
    <div class="container mt-5">
        <h2 class="text-center">Upload1 Large File in Chunks</h2>
        <form id="uploadForm" method="post" action="/upload/chunk" enctype="multipart/form-data">
            <div class="mb-3">
                <label for="file" class="form-label">Select File</label>
                <input class="form-control" type="file" id="file-input" name="file" required>
            </div>
            <div class="progress mb-3" style="height: 25px;">
                <div id="progressBar" class="progress-bar progress-bar-striped" role="progressbar" style="width: 0%;"
                    aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
            </div>
            <button type="submit" class="btn btn-primary">Upload</button>
        </form>
        <div id="statusMessage" class="mt-3"></div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        const fileInput = document.getElementById('file-input');
        fileInput.addEventListener('change', async (event) => {
            const file = event.target.files[0];
            const chunkSize = 5 * 1024 * 1024; // 5MB
            const totalChunks = Math.ceil(file.size / chunkSize);
            let startByte = 0;
            let uploadedChunks = 1;

            for (let i = 1; i <= totalChunks; i++) {
                const endByte = Math.min(startByte + chunkSize, file.size);
                const chunk = file.slice(startByte, endByte);
                console.log('currentChunk', i);
                console.log('chunk', chunk);
                console.log('endByte', endByte);
                console.log('totalChunks', totalChunks);
                console.log('uploadedChunks', uploadedChunks);
                await uploadChunk(chunk, totalChunks, i);
                uploadedChunks++;
                const progressPercent = (uploadedChunks / totalChunks) * 100;
                progressBar.style.width = progressPercent + '%';
                console.log('progressPercent', progressPercent);
                progressBar.setAttribute('aria-valuenow', progressPercent);
                startByte = endByte;

            }
            console.log('Upload complete');
        });

        async function uploadChunk(chunk, totalChunks, currentChunk) {
            const formData = new FormData();
            formData.append('file', chunk);
            formData.append('totalChunks', totalChunks);
            formData.append('currentChunk', currentChunk);

            const response = await fetch('/upload/chunk', {
                method: 'POST',
                body: formData
            });
            console.log('response', response);
            if (!response.ok) {
                throw new Error('Chunk upload failed');
            }
        }
    </script>
</body>

</html>